// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: testp/testp.proto

package test_quadro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookShelfClient is the client API for BookShelf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookShelfClient interface {
	GetBook(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Book, error)
	GetAuthor(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Author, error)
}

type bookShelfClient struct {
	cc grpc.ClientConnInterface
}

func NewBookShelfClient(cc grpc.ClientConnInterface) BookShelfClient {
	return &bookShelfClient{cc}
}

func (c *bookShelfClient) GetBook(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/testp.BookShelf/GetBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookShelfClient) GetAuthor(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Author, error) {
	out := new(Author)
	err := c.cc.Invoke(ctx, "/testp.BookShelf/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookShelfServer is the server API for BookShelf service.
// All implementations must embed UnimplementedBookShelfServer
// for forward compatibility
type BookShelfServer interface {
	GetBook(context.Context, *Author) (*Book, error)
	GetAuthor(context.Context, *Book) (*Author, error)
	mustEmbedUnimplementedBookShelfServer()
}

// UnimplementedBookShelfServer must be embedded to have forward compatible implementations.
type UnimplementedBookShelfServer struct {
}

func (UnimplementedBookShelfServer) GetBook(context.Context, *Author) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookShelfServer) GetAuthor(context.Context, *Book) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedBookShelfServer) mustEmbedUnimplementedBookShelfServer() {}

// UnsafeBookShelfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookShelfServer will
// result in compilation errors.
type UnsafeBookShelfServer interface {
	mustEmbedUnimplementedBookShelfServer()
}

func RegisterBookShelfServer(s grpc.ServiceRegistrar, srv BookShelfServer) {
	s.RegisterService(&BookShelf_ServiceDesc, srv)
}

func _BookShelf_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testp.BookShelf/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).GetBook(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookShelf_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testp.BookShelf/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).GetAuthor(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

// BookShelf_ServiceDesc is the grpc.ServiceDesc for BookShelf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookShelf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testp.BookShelf",
	HandlerType: (*BookShelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBook",
			Handler:    _BookShelf_GetBook_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _BookShelf_GetAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testp/testp.proto",
}
